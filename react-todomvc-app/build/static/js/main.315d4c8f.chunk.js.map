{"version":3,"sources":["components/AddToDo.js","components/ToDoList.js","components/ToDoFooter.js","container/ToDoPage.js","App.js","serviceWorker.js","index.js"],"names":["AddToDo","props","react_default","a","createElement","className","onChange","id","type","placeholder","onClick","submit","ToDoList","listItems","map","item","idx","key","title","ToDoFooter","concat","itemsLeft","filterFunction","href","ToDoPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","defineProperty","target","value","jsonObject","state","todo","Axios","post","then","response","data","notes","DisplayList","filter","statusType","filteredList","status","name","_this2","get","payload","components_AddToDo","components_ToDoList","components_ToDoFooter","React","Component","App","container_ToDoPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.315d4c8f.chunk.js","sourcesContent":["import React, { Component } from \"react\"\n\nconst AddToDo = (props) => {\n  return (\n    <div className=\"new-todo edit\">\n      <input onChange={props.onChange} id=\"todo\" type=\"text\" placeholder=\"what needs to be done?\" />\n      <button onClick={props.submit}>Add</button>\n    </div>\n  )\n}\n\nexport default AddToDo\n","import React, { Component } from \"react\"\n\nconst ToDoList = (props) => {\n  return (\n    <div>\n      <ul className=\"todo-list\">\n        {props.listItems.map((item, idx) => {\n          return (\n            <li key={idx}>\n              <label>{item.title}</label>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default ToDoList\n","import React, { Component } from \"react\"\n\nconst ToDoFooter = (props) => {\n  return (\n    <div className=\"filters footer\">\n      <label>{`${props.itemsLeft} item left`}</label>\n      <ul>\n        <li>\n          <a onClick={() => props.filterFunction(\"All\")} href=\"#\">\n            All\n          </a>\n        </li>\n        <li>\n          <a onClick={() => props.filterFunction(\"Active\")} href=\"#\">\n            Active\n          </a>\n        </li>\n        <li>\n          <a onClick={() => props.filterFunction(\"Completed\")} href=\"#\">\n            Completed\n          </a>\n        </li>\n        <li>\n          <a href=\"#\">Clear Completed</a>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default ToDoFooter\n","import React, { Component } from \"react\"\nimport AddToDo from \"../components/AddToDo\"\nimport ToDoList from \"../components/ToDoList\"\nimport ToDoFooter from \"../components/ToDoFooter\"\nimport Axios from \"axios\"\n\nclass ToDoPage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      listItems: [\n        {\n          name: \"Homework\",\n          status: \"Completed\"\n        },\n        {\n          name: \"Dinner\",\n          status: \"Active\"\n        },\n        {\n          name: \"Coding in React\",\n          status: \"\"\n        }\n      ],\n      itemsLeft: 2,\n      todo: \"\",\n      DisplayList: [\n        {\n          name: \"Homework\"\n        },\n        {\n          name: \"Dinner\"\n        },\n        {\n          name: \"Coding in React\"\n        }\n      ]\n    }\n  }\n\n  componentDidMount() {\n    Axios.get(\"http://localhost:1337/notes\").then((response) => {\n      this.setState({ listItems: response.data.payload, DisplayList: response.data.payload })\n    })\n  }\n\n  onChange = (event) => {\n    this.setState({ [event.target.id]: event.target.value })\n  }\n\n  submit = () => {\n    let jsonObject = {\n      title: this.state.todo\n    }\n    Axios.post(\"http://localhost:1337/notes\", jsonObject).then((response) => {\n      this.setState({ listItems: response.data.notes, DisplayList: response.data.notes })\n    })\n  }\n\n  filter = (statusType) => {\n    let filteredList\n\n    if (statusType !== \"All\") {\n      filteredList = this.state.listItems.filter((item) => item.status === statusType)\n    } else filteredList = this.state.listItems\n    this.setState({ DisplayList: filteredList })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>todos</h1>\n        <AddToDo onChange={this.onChange} submit={this.submit} />\n        <ToDoList listItems={this.state.DisplayList} />\n        <ToDoFooter itemsLeft={this.state.itemsLeft} filterFunction={this.filter} />\n      </div>\n    )\n  }\n}\n\nexport default ToDoPage\n","import React, { Component } from \"react\"\nimport ToDoPage from \"./container/ToDoPage\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"todoapp\">\n        <ToDoPage />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}